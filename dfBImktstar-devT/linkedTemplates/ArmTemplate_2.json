{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "dfBImktstar-devT"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/df_Src_Cursos')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "2 - Stage"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_Ext_Silver_Cursos_Destino",
								"type": "DatasetReference"
							},
							"name": "dlSilverCurso"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_tbl_src_Cursos",
								"type": "DatasetReference"
							},
							"name": "srcDestino"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          Cod as string,",
						"          {Nome Novo} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> dlSilverCurso",
						"dlSilverCurso sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as integer,",
						"          BK as string,",
						"          Nome as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BK = Cod,",
						"          Nome = {Nome Novo}",
						"     )) ~> srcDestino"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_Src_Produtor')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "2 - Stage"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_Ext_Silver_Produtor_Destino",
								"type": "DatasetReference"
							},
							"name": "DLSilver"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_tbl_src_Produtor",
								"type": "DatasetReference"
							},
							"name": "srcDestino"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          {Nome do Produtor} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> DLSilver",
						"DLSilver sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as integer,",
						"          Nome as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Nome = {Nome do Produtor}",
						"     )) ~> srcDestino"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_Src_Regiao')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "2 - Stage"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_Ext_Silver_MacroRegioes_Destino",
								"type": "DatasetReference"
							},
							"name": "DLSilver"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_tbl_src_Regioes",
								"type": "DatasetReference"
							},
							"name": "srcDestino"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          ddd as integer,",
						"          cidade as string,",
						"          estado as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> DLSilver",
						"DLSilver sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as integer,",
						"          DDD as integer,",
						"          Cidade as string,",
						"          Estado as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          DDD = ddd,",
						"          Cidade = cidade,",
						"          Estado = estado",
						"     )) ~> srcDestino"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_Src_Status')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "2 - Stage"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_Ext_Silver_Status_Destino",
								"type": "DatasetReference"
							},
							"name": "DLSilver"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_tbl_src_Status",
								"type": "DatasetReference"
							},
							"name": "srcDestino"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          Status as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> DLSilver",
						"DLSilver sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as integer,",
						"          Nome as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Nome = Status",
						"     )) ~> srcDestino"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_Src_TipoPagamento')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "2 - Stage"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_Ext_Silver_tipodePagamento_Destino",
								"type": "DatasetReference"
							},
							"name": "DLSilver"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_tbl_src_TipoPagamento",
								"type": "DatasetReference"
							},
							"name": "srcDestino"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          {Tipo de Pagamento} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> DLSilver",
						"DLSilver sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as integer,",
						"          Nome as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Nome = {Tipo de Pagamento}",
						"     )) ~> srcDestino"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_Stg_Afiliados')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "2 - Stage"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_tbl_src_Afiliados",
								"type": "DatasetReference"
							},
							"name": "Source"
						},
						{
							"dataset": {
								"referenceName": "ds_tbl_stg_Afiliados",
								"type": "DatasetReference"
							},
							"name": "Stage"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_tbl_stg_Afiliados",
								"type": "DatasetReference"
							},
							"name": "StageNew"
						},
						{
							"dataset": {
								"referenceName": "ds_tbl_stg_Afiliados",
								"type": "DatasetReference"
							},
							"name": "StageUpdate"
						},
						{
							"dataset": {
								"referenceName": "ds_tbl_stg_Afiliados",
								"type": "DatasetReference"
							},
							"name": "StageInativar"
						}
					],
					"transformations": [
						{
							"name": "Orderby"
						},
						{
							"name": "RenomearColunasSrc"
						},
						{
							"name": "OrderBystg"
						},
						{
							"name": "RenomearColunasStg"
						},
						{
							"name": "Ativos"
						},
						{
							"name": "LeftJoin"
						},
						{
							"name": "dataIni"
						},
						{
							"name": "NovosRegistros"
						},
						{
							"name": "AtualizarRegistro"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Id as integer,",
						"          Nome as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> Source",
						"source(output(",
						"          Id as integer,",
						"          BK as integer,",
						"          Nome as string,",
						"          DataInicio as date,",
						"          DataFim as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> Stage",
						"Source sort(asc(Id, true)) ~> Orderby",
						"Orderby select(mapColumn(",
						"          Id_SRC = Id,",
						"          Nome_SRC = Nome",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> RenomearColunasSrc",
						"Ativos sort(asc(BK, true)) ~> OrderBystg",
						"OrderBystg select(mapColumn(",
						"          Id_STG = Id,",
						"          BK_STG = BK,",
						"          Nome_STG = Nome,",
						"          DataInicio_STG = DataInicio,",
						"          DataFim_STG = DataFim",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> RenomearColunasStg",
						"Stage filter(isNull(DataFim)) ~> Ativos",
						"RenomearColunasSrc, RenomearColunasStg join(Id_SRC == BK_STG,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> LeftJoin",
						"LeftJoin derive(DataStartEnd = currentDate()) ~> dataIni",
						"dataIni split(isNull(BK_STG),",
						"     Id_SRC == BK_STG && (Nome_SRC != Nome_STG),",
						"     Id_SRC == BK_STG && (Nome_SRC != Nome_STG),",
						"     disjoint: true) ~> NovosRegistros@(NovosRegistros, Update, Inativar)",
						"NovosRegistros@Inativar alterRow(updateIf(Id_SRC==BK_STG&&(Nome_SRC!=Nome_STG))) ~> AtualizarRegistro",
						"NovosRegistros@NovosRegistros sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as integer,",
						"          BK as integer,",
						"          Nome as string,",
						"          DataInicio as date,",
						"          DataFim as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BK = Id_SRC,",
						"          Nome = Nome_SRC,",
						"          DataInicio = DataStartEnd",
						"     )) ~> StageNew",
						"NovosRegistros@Update sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as integer,",
						"          BK as integer,",
						"          Nome as string,",
						"          DataInicio as date,",
						"          DataFim as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BK = Id_SRC,",
						"          Nome = Nome_SRC,",
						"          DataInicio = DataStartEnd",
						"     )) ~> StageUpdate",
						"AtualizarRegistro sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as integer,",
						"          BK as integer,",
						"          Nome as string,",
						"          DataInicio as date,",
						"          DataFim as date",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['Id'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Id = Id_STG,",
						"          BK = BK_STG,",
						"          Nome = Nome_STG,",
						"          DataInicio = DataInicio_STG,",
						"          DataFim = DataStartEnd",
						"     )) ~> StageInativar"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_Stg_Cursos')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "2 - Stage"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_tbl_src_Cursos",
								"type": "DatasetReference"
							},
							"name": "Source"
						},
						{
							"dataset": {
								"referenceName": "ds_tbl_stg_Cursos",
								"type": "DatasetReference"
							},
							"name": "Stg"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_tbl_stg_Cursos",
								"type": "DatasetReference"
							},
							"name": "StageNew"
						},
						{
							"dataset": {
								"referenceName": "ds_tbl_stg_Cursos",
								"type": "DatasetReference"
							},
							"name": "StageUpdate"
						},
						{
							"dataset": {
								"referenceName": "ds_tbl_stg_Cursos",
								"type": "DatasetReference"
							},
							"name": "StageInativar"
						}
					],
					"transformations": [
						{
							"name": "OrdenarId"
						},
						{
							"name": "Ativos"
						},
						{
							"name": "OrderBy"
						},
						{
							"name": "RenomearStg"
						},
						{
							"name": "RenomearSRC"
						},
						{
							"name": "LeftJoin"
						},
						{
							"name": "DataInicio"
						},
						{
							"name": "split1"
						},
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Id as integer,",
						"          BK as string,",
						"          Nome as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> Source",
						"source(output(",
						"          Id as integer,",
						"          BK as integer,",
						"          CodProdOrigine as string,",
						"          Nome as string,",
						"          DataInicio as date,",
						"          DataFim as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> Stg",
						"Source sort(asc(Id, true)) ~> OrdenarId",
						"Stg filter(isNull(DataFim)) ~> Ativos",
						"Ativos sort(asc(BK, true)) ~> OrderBy",
						"OrderBy select(mapColumn(",
						"          Id_STG = Id,",
						"          BK_STG = BK,",
						"          CodProdOrigine_STG = CodProdOrigine,",
						"          Nome_STG = Nome,",
						"          DataInicio_STG = DataInicio,",
						"          DataFim_STG = DataFim",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> RenomearStg",
						"OrdenarId select(mapColumn(",
						"          Id_SRC = Id,",
						"          BK_SRC = BK,",
						"          Nome_SRC = Nome",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> RenomearSRC",
						"RenomearSRC, RenomearStg join(Id_SRC == BK_STG,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> LeftJoin",
						"LeftJoin derive(DataStartEnd = currentDate()) ~> DataInicio",
						"DataInicio split(isNull(BK_STG),",
						"     (Id_SRC == BK_STG) && (Nome_SRC != Nome_STG),",
						"     (Id_SRC == BK_STG) && (Nome_SRC != Nome_STG),",
						"     disjoint: true) ~> split1@(NovosRegistros, Update, Inativar)",
						"split1@Inativar alterRow(updateIf((Id_SRC==BK_STG)&&(Nome_SRC!=Nome_STG))) ~> alterRow1",
						"split1@NovosRegistros sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as integer,",
						"          BK as integer,",
						"          CodProdOrigine as string,",
						"          Nome as string,",
						"          DataInicio as date,",
						"          DataFim as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BK = Id_SRC,",
						"          CodProdOrigine = BK_SRC,",
						"          Nome = Nome_SRC,",
						"          DataInicio = DataStartEnd",
						"     )) ~> StageNew",
						"split1@Update sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as integer,",
						"          BK as integer,",
						"          CodProdOrigine as string,",
						"          Nome as string,",
						"          DataInicio as date,",
						"          DataFim as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BK = Id_SRC,",
						"          CodProdOrigine = BK_SRC,",
						"          Nome = Nome_SRC,",
						"          DataInicio = DataStartEnd",
						"     )) ~> StageUpdate",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as integer,",
						"          BK as integer,",
						"          CodProdOrigine as string,",
						"          Nome as string,",
						"          DataInicio as date,",
						"          DataFim as date",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['Id'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Id = Id_STG,",
						"          BK = BK_STG,",
						"          CodProdOrigine = CodProdOrigine_STG,",
						"          Nome = Nome_STG,",
						"          DataInicio = DataInicio_STG,",
						"          DataFim = DataStartEnd",
						"     )) ~> StageInativar"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_Stg_Produtor')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "2 - Stage"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_tbl_src_Produtor",
								"type": "DatasetReference"
							},
							"name": "Source"
						},
						{
							"dataset": {
								"referenceName": "ds_tbl_stg_Produtor",
								"type": "DatasetReference"
							},
							"name": "Stage"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_tbl_stg_Produtor",
								"type": "DatasetReference"
							},
							"name": "StageNew"
						},
						{
							"dataset": {
								"referenceName": "ds_tbl_stg_Produtor",
								"type": "DatasetReference"
							},
							"name": "StageUpdate"
						},
						{
							"dataset": {
								"referenceName": "ds_tbl_stg_Produtor",
								"type": "DatasetReference"
							},
							"name": "StageInativar"
						}
					],
					"transformations": [
						{
							"name": "Orderby"
						},
						{
							"name": "RenomearColunasSrc"
						},
						{
							"name": "OrderBystg"
						},
						{
							"name": "RenomearColunasStg"
						},
						{
							"name": "Ativos"
						},
						{
							"name": "LeftJoin"
						},
						{
							"name": "dataIni"
						},
						{
							"name": "NovosRegistros"
						},
						{
							"name": "AtualizarRegistro"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Id as integer,",
						"          Nome as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> Source",
						"source(output(",
						"          Id as integer,",
						"          BK as integer,",
						"          Nome as string,",
						"          DataInicio as date,",
						"          DataFim as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> Stage",
						"Source sort(asc(Id, true)) ~> Orderby",
						"Orderby select(mapColumn(",
						"          Id_SRC = Id,",
						"          Nome_SRC = Nome",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> RenomearColunasSrc",
						"Ativos sort(asc(BK, true)) ~> OrderBystg",
						"OrderBystg select(mapColumn(",
						"          Id_STG = Id,",
						"          BK_STG = BK,",
						"          Nome_STG = Nome,",
						"          DataInicio_STG = DataInicio,",
						"          DataFim_STG = DataFim",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> RenomearColunasStg",
						"Stage filter(isNull(DataFim)) ~> Ativos",
						"RenomearColunasSrc, RenomearColunasStg join(Id_SRC == BK_STG,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> LeftJoin",
						"LeftJoin derive(DataStartEnd = currentDate()) ~> dataIni",
						"dataIni split(isNull(BK_STG),",
						"     Id_SRC == BK_STG && (Nome_SRC != Nome_STG),",
						"     Id_SRC == BK_STG && (Nome_SRC != Nome_STG),",
						"     disjoint: true) ~> NovosRegistros@(NovosRegistros, Update, Inativar)",
						"NovosRegistros@Inativar alterRow(updateIf(Id_SRC==BK_STG&&(Nome_SRC!=Nome_STG))) ~> AtualizarRegistro",
						"NovosRegistros@NovosRegistros sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as integer,",
						"          BK as integer,",
						"          Nome as string,",
						"          DataInicio as date,",
						"          DataFim as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BK = Id_SRC,",
						"          Nome = Nome_SRC,",
						"          DataInicio = DataStartEnd",
						"     )) ~> StageNew",
						"NovosRegistros@Update sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as integer,",
						"          BK as integer,",
						"          Nome as string,",
						"          DataInicio as date,",
						"          DataFim as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BK = Id_SRC,",
						"          Nome = Nome_SRC,",
						"          DataInicio = DataStartEnd",
						"     )) ~> StageUpdate",
						"AtualizarRegistro sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as integer,",
						"          BK as integer,",
						"          Nome as string,",
						"          DataInicio as date,",
						"          DataFim as date",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['Id'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Id = Id_STG,",
						"          BK = BK_STG,",
						"          Nome = Nome_STG,",
						"          DataInicio = DataInicio_STG,",
						"          DataFim = DataStartEnd",
						"     )) ~> StageInativar"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_Stg_Regiao')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "2 - Stage"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_tbl_src_Regioes",
								"type": "DatasetReference"
							},
							"name": "Source"
						},
						{
							"dataset": {
								"referenceName": "ds_tbl_stg_Regioes",
								"type": "DatasetReference"
							},
							"name": "Stg"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_tbl_stg_Regioes",
								"type": "DatasetReference"
							},
							"name": "StageNew"
						},
						{
							"dataset": {
								"referenceName": "ds_tbl_stg_Regioes",
								"type": "DatasetReference"
							},
							"name": "StageUpdate"
						},
						{
							"dataset": {
								"referenceName": "ds_tbl_stg_Regioes",
								"type": "DatasetReference"
							},
							"name": "StageInativar"
						}
					],
					"transformations": [
						{
							"name": "OrdenarId"
						},
						{
							"name": "Ativos"
						},
						{
							"name": "OrderBy"
						},
						{
							"name": "RenomearStg"
						},
						{
							"name": "RenomearSRC"
						},
						{
							"name": "LeftJoin"
						},
						{
							"name": "DataInicio"
						},
						{
							"name": "split1"
						},
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Id as integer,",
						"          DDD as integer,",
						"          Cidade as string,",
						"          Estado as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> Source",
						"source(output(",
						"          Id as integer,",
						"          BK as integer,",
						"          DDD as integer,",
						"          Cidade as string,",
						"          Estado as string,",
						"          DataInicio as date,",
						"          DataFim as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> Stg",
						"Source sort(asc(Id, true)) ~> OrdenarId",
						"Stg filter(isNull(DataFim)) ~> Ativos",
						"Ativos sort(asc(BK, true)) ~> OrderBy",
						"OrderBy select(mapColumn(",
						"          Id_STG = Id,",
						"          BK_STG = BK,",
						"          DDD_STG = DDD,",
						"          Cidade_STG = Cidade,",
						"          Estado_STG = Estado,",
						"          DataInicio_STG = DataInicio,",
						"          DataFim_STG = DataFim",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> RenomearStg",
						"OrdenarId select(mapColumn(",
						"          Id_SRC = Id,",
						"          DDD_SRC = DDD,",
						"          Cidade_SRC = Cidade,",
						"          Estado_SRC = Estado",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> RenomearSRC",
						"RenomearSRC, RenomearStg join(Id_SRC == BK_STG,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> LeftJoin",
						"LeftJoin derive(DataStartEnd = currentDate()) ~> DataInicio",
						"DataInicio split(isNull(BK_STG),",
						"     (Id_SRC == BK_STG) && (DDD_SRC != DDD_STG || Cidade_SRC != Cidade_STG || Estado_SRC != Estado_STG),",
						"     (Id_SRC == BK_STG) && (DDD_SRC != DDD_STG || Cidade_SRC != Cidade_STG || Estado_SRC != Estado_STG),",
						"     disjoint: true) ~> split1@(NovosRegistros, Update, Inativar)",
						"split1@Inativar alterRow(updateIf((Id_SRC==BK_STG)&&(DDD_SRC!=DDD_STG||Cidade_SRC!=Cidade_STG||Estado_SRC!=Estado_STG))) ~> alterRow1",
						"split1@NovosRegistros sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as integer,",
						"          BK as integer,",
						"          DDD as integer,",
						"          Cidade as string,",
						"          Estado as string,",
						"          DataInicio as date,",
						"          DataFim as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BK = Id_SRC,",
						"          DDD = DDD_SRC,",
						"          Cidade = Cidade_SRC,",
						"          Estado = Estado_SRC,",
						"          DataInicio = DataStartEnd",
						"     )) ~> StageNew",
						"split1@Update sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as integer,",
						"          BK as integer,",
						"          DDD as integer,",
						"          Cidade as string,",
						"          Estado as string,",
						"          DataInicio as date,",
						"          DataFim as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BK = Id_SRC,",
						"          DDD = DDD_SRC,",
						"          Cidade = Cidade_SRC,",
						"          Estado = Estado_SRC",
						"     )) ~> StageUpdate",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as integer,",
						"          BK as integer,",
						"          DDD as integer,",
						"          Cidade as string,",
						"          Estado as string,",
						"          DataInicio as date,",
						"          DataFim as date",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['Id'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Id = Id_STG,",
						"          BK = BK_STG,",
						"          DDD = DDD_STG,",
						"          Cidade = Cidade_STG,",
						"          Estado = Estado_STG,",
						"          DataInicio = DataInicio_STG,",
						"          DataFim = DataStartEnd",
						"     )) ~> StageInativar"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_Stg_Status')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "2 - Stage"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_tbl_src_Status",
								"type": "DatasetReference"
							},
							"name": "Source"
						},
						{
							"dataset": {
								"referenceName": "ds_tbl_stg_Status",
								"type": "DatasetReference"
							},
							"name": "Stage"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_tbl_stg_Status",
								"type": "DatasetReference"
							},
							"name": "StageNew"
						},
						{
							"dataset": {
								"referenceName": "ds_tbl_stg_Status",
								"type": "DatasetReference"
							},
							"name": "StageUpdate"
						},
						{
							"dataset": {
								"referenceName": "ds_tbl_stg_Status",
								"type": "DatasetReference"
							},
							"name": "StageInativar"
						}
					],
					"transformations": [
						{
							"name": "Orderby"
						},
						{
							"name": "RenomearColunasSrc"
						},
						{
							"name": "OrderBystg"
						},
						{
							"name": "RenomearColunasStg"
						},
						{
							"name": "Ativos"
						},
						{
							"name": "LeftJoin"
						},
						{
							"name": "dataIni"
						},
						{
							"name": "NovosRegistros"
						},
						{
							"name": "AtualizarRegistro"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Id as integer,",
						"          Nome as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> Source",
						"source(output(",
						"          Id as integer,",
						"          BK as integer,",
						"          Nome as string,",
						"          DataInicio as date,",
						"          DataFim as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> Stage",
						"Source sort(asc(Id, true)) ~> Orderby",
						"Orderby select(mapColumn(",
						"          Id_SRC = Id,",
						"          Nome_SRC = Nome",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> RenomearColunasSrc",
						"Ativos sort(asc(BK, true)) ~> OrderBystg",
						"OrderBystg select(mapColumn(",
						"          Id_STG = Id,",
						"          BK_STG = BK,",
						"          Nome_STG = Nome,",
						"          DataInicio_STG = DataInicio,",
						"          DataFim_STG = DataFim",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> RenomearColunasStg",
						"Stage filter(isNull(DataFim)) ~> Ativos",
						"RenomearColunasSrc, RenomearColunasStg join(Id_SRC == BK_STG,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> LeftJoin",
						"LeftJoin derive(DataStartEnd = currentDate()) ~> dataIni",
						"dataIni split(isNull(BK_STG),",
						"     Id_SRC == BK_STG && (Nome_SRC != Nome_STG),",
						"     Id_SRC == BK_STG && (Nome_SRC != Nome_STG),",
						"     disjoint: true) ~> NovosRegistros@(NovosRegistros, Update, Inativar)",
						"NovosRegistros@Inativar alterRow(updateIf(Id_SRC==BK_STG&&(Nome_SRC!=Nome_STG))) ~> AtualizarRegistro",
						"NovosRegistros@NovosRegistros sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as integer,",
						"          BK as integer,",
						"          Nome as string,",
						"          DataInicio as date,",
						"          DataFim as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BK = Id_SRC,",
						"          Nome = Nome_SRC,",
						"          DataInicio = DataStartEnd",
						"     )) ~> StageNew",
						"NovosRegistros@Update sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as integer,",
						"          BK as integer,",
						"          Nome as string,",
						"          DataInicio as date,",
						"          DataFim as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BK = Id_SRC,",
						"          Nome = Nome_SRC,",
						"          DataInicio = DataStartEnd",
						"     )) ~> StageUpdate",
						"AtualizarRegistro sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as integer,",
						"          BK as integer,",
						"          Nome as string,",
						"          DataInicio as date,",
						"          DataFim as date",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['Id'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Id = Id_STG,",
						"          BK = BK_STG,",
						"          Nome = Nome_STG,",
						"          DataInicio = DataInicio_STG,",
						"          DataFim = DataStartEnd",
						"     )) ~> StageInativar"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_Stg_TipoPagamento')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "2 - Stage"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_tbl_src_TipoPagamento",
								"type": "DatasetReference"
							},
							"name": "Source"
						},
						{
							"dataset": {
								"referenceName": "ds_tbl_stg_TipoPagamento",
								"type": "DatasetReference"
							},
							"name": "Stage"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_tbl_stg_TipoPagamento",
								"type": "DatasetReference"
							},
							"name": "StageNew"
						},
						{
							"dataset": {
								"referenceName": "ds_tbl_stg_TipoPagamento",
								"type": "DatasetReference"
							},
							"name": "StageUpdate"
						},
						{
							"dataset": {
								"referenceName": "ds_tbl_stg_TipoPagamento",
								"type": "DatasetReference"
							},
							"name": "StageInativar"
						}
					],
					"transformations": [
						{
							"name": "Orderby"
						},
						{
							"name": "RenomearColunasSrc"
						},
						{
							"name": "OrderBystg"
						},
						{
							"name": "RenomearColunasStg"
						},
						{
							"name": "Ativos"
						},
						{
							"name": "LeftJoin"
						},
						{
							"name": "dataIni"
						},
						{
							"name": "NovosRegistros"
						},
						{
							"name": "AtualizarRegistro"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Id as integer,",
						"          Nome as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> Source",
						"source(output(",
						"          Id as integer,",
						"          BK as integer,",
						"          Nome as string,",
						"          DataInicio as date,",
						"          DataFim as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> Stage",
						"Source sort(asc(Id, true)) ~> Orderby",
						"Orderby select(mapColumn(",
						"          Id_SRC = Id,",
						"          Nome_SRC = Nome",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> RenomearColunasSrc",
						"Ativos sort(asc(BK, true)) ~> OrderBystg",
						"OrderBystg select(mapColumn(",
						"          Id_STG = Id,",
						"          BK_STG = BK,",
						"          Nome_STG = Nome,",
						"          DataInicio_STG = DataInicio,",
						"          DataFim_STG = DataFim",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> RenomearColunasStg",
						"Stage filter(isNull(DataFim)) ~> Ativos",
						"RenomearColunasSrc, RenomearColunasStg join(Id_SRC == BK_STG,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> LeftJoin",
						"LeftJoin derive(DataStartEnd = currentDate()) ~> dataIni",
						"dataIni split(isNull(BK_STG),",
						"     Id_SRC == BK_STG && (Nome_SRC != Nome_STG),",
						"     Id_SRC == BK_STG && (Nome_SRC != Nome_STG),",
						"     disjoint: true) ~> NovosRegistros@(NovosRegistros, Update, Inativar)",
						"NovosRegistros@Inativar alterRow(updateIf(Id_SRC==BK_STG&&(Nome_SRC!=Nome_STG))) ~> AtualizarRegistro",
						"NovosRegistros@NovosRegistros sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as integer,",
						"          BK as integer,",
						"          Nome as string,",
						"          DataInicio as date,",
						"          DataFim as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BK = Id_SRC,",
						"          Nome = Nome_SRC,",
						"          DataInicio = DataStartEnd",
						"     )) ~> StageNew",
						"NovosRegistros@Update sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as integer,",
						"          BK as integer,",
						"          Nome as string,",
						"          DataInicio as date,",
						"          DataFim as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BK = Id_SRC,",
						"          Nome = Nome_SRC,",
						"          DataInicio = DataStartEnd",
						"     )) ~> StageUpdate",
						"AtualizarRegistro sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as integer,",
						"          BK as integer,",
						"          Nome as string,",
						"          DataInicio as date,",
						"          DataFim as date",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['Id'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Id = Id_STG,",
						"          BK = BK_STG,",
						"          Nome = Nome_STG,",
						"          DataInicio = DataInicio_STG,",
						"          DataFim = DataStartEnd",
						"     )) ~> StageInativar"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ppl_ext_Afiliados')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dfExtAfiliados",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_Ext_Afliados",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Vendas": {},
									"AfiliadoSilver": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "1 - Extraction"
				},
				"annotations": [],
				"lastPublishTime": "2024-12-04T22:42:45Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ppl_ext_Cursos')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df_ext_cursos",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_Ext_Cursos",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"CodProdutos": {},
									"Cursos": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "1 - Extraction"
				},
				"annotations": [],
				"lastPublishTime": "2024-12-03T18:18:39Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ppl_ext_MacroRegioes')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df_ext_MacroRegioes",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_Ext_MacroRegioes",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"MacroRegioes": {},
									"MacroRegiaoSilver": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "1 - Extraction"
				},
				"annotations": [],
				"lastPublishTime": "2024-12-04T22:49:13Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ppl_ext_Produtor')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_Ext_Produtor",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Vendas": {},
									"Produtor": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "1 - Extraction"
				},
				"annotations": [],
				"lastPublishTime": "2024-12-05T00:28:57Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ppl_ext_Status')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df_ext_status",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_Ext_Status",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Vendas": {},
									"Status": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "1 - Extraction"
				},
				"annotations": [],
				"lastPublishTime": "2024-12-03T18:18:39Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ppl_ext_VendasHotmart')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_Ext_VendasHotmart",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"VendasHotMartEntrada": {},
									"VendasHotMartDestino": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "1 - Extraction"
				},
				"annotations": [],
				"lastPublishTime": "2024-12-05T00:15:55Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ppl_ext_tipo_Pagamento')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df_ext_tipo_pagamento",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_Ext_TipodePagamento",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Vendas": {},
									"TipodePagamentoSilver": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "1 - Extraction"
				},
				"annotations": [],
				"lastPublishTime": "2024-12-03T17:57:20Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ppl_pre_Afiliados')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df_Pre_Afiliados",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_Pre_Afiliados",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source": {},
									"presentation": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "3 - Presentation"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ppl_pre_Cursos')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df_Pre_Cursos",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_Pre_Cursos",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source": {},
									"Presentation": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "3 - Presentation"
				},
				"annotations": []
			},
			"dependsOn": []
		}
	]
}